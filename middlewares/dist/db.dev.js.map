{"version":3,"sources":["db.js"],"names":["cloudinary","config","cloud_name","api_key","api_secret","connectDb","mongoose","connect","then","res","console","log","connection","host","err","LoggedInUserOnly","req","next","token","cookies","status","json","success","message","decodedData","jwt","verify","user","userId","uploadSingleFile","file","send","uploader","upload","path","folder","result","fs","unlink","fileDetails","File","originalName","originalname","fileName","public_id","filePath","secure_url","size","mimeType","mimetype","save","error"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEAA,eAAWC,MAAX,CAAkB;AACdC,EAAAA,UAAU,EAAE,WADE;AAEdC,EAAAA,OAAO,EAAE,iBAFK;AAGdC,EAAAA,UAAU,EAAE;AAHE,CAAlB;;AAMA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAK;AAClBC,uBAASC,OAAT,CAAiB,qCAAjB,EAAwDC,IAAxD,CAA6D,UAACC,GAAD,EAAO;AACjEC,IAAAA,OAAO,CAACC,GAAR,4CAAgDF,GAAG,CAACG,UAAJ,CAAeC,IAA/D;AACH,GAFA,WAEQ,UAACC,GAAD,EAAO;AACZJ,IAAAA,OAAO,CAACC,GAAR,gEAA0EG,GAA1E;AACH,GAJA;AAKJ,CAND;;;;AAQO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,GAAD,EAAKP,GAAL,EAASQ,IAAT,EAAgB;AAC5C,MAAMC,KAAK,GAAIF,GAAG,CAACG,OAAJ,CAAY,YAAZ,CAAf;AACA,MAAG,CAACD,KAAJ,EAAW,OAAOT,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnCC,IAAAA,OAAO,EAAC,KAD2B;AAEnCC,IAAAA,OAAO,EAAC;AAF2B,GAArB,CAAP;;AAIX,MAAMC,WAAW,GAAGC,yBAAIC,MAAJ,CAAWR,KAAX,EAAiB,iBAAjB,CAApB;;AACAF,EAAAA,GAAG,CAACW,IAAJ,GAAWH,WAAW,CAACI,MAAvB,CAP4C,CAOb;;AAE/BX,EAAAA,IAAI;AACP,CAVM;;;;AAaP,IAAMY,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAOb,GAAP,EAAYP,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,cAGdO,GAAG,CAACc,IAHU;AAAA;AAAA;AAAA;;AAAA,2CAIVrB,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB,kBAArB,CAJU;;AAAA;AAAA;AAAA,0CAQE/B,eAAWgC,QAAX,CAAoBC,MAApB,CAA2BjB,GAAG,CAACc,IAAJ,CAASI,IAApC,EAA0C;AAC7DC,YAAAA,MAAM,EAAE,SADqD,CAC1C;;AAD0C,WAA1C,CARF;;AAAA;AAQbC,UAAAA,MARa;AAAA;AAAA,0CAabC,qBAAGC,MAAH,CAAUtB,GAAG,CAACc,IAAJ,CAASI,IAAnB,CAba;;AAAA;AAenB;AACMK,UAAAA,WAhBa,GAgBC,IAAIC,IAAJ,CAAS;AAC3BC,YAAAA,YAAY,EAAEzB,GAAG,CAACc,IAAJ,CAASY,YADI;AAE3BC,YAAAA,QAAQ,EAAEP,MAAM,CAACQ,SAFU;AAG3BC,YAAAA,QAAQ,EAAET,MAAM,CAACU,UAHU;AAI3BC,YAAAA,IAAI,EAAE/B,GAAG,CAACc,IAAJ,CAASiB,IAJY;AAK3BC,YAAAA,QAAQ,EAAEhC,GAAG,CAACc,IAAJ,CAASmB;AALQ,WAAT,CAhBD;AAAA;AAAA,0CAwBbV,WAAW,CAACW,IAAZ,EAxBa;;AAAA;AAAA,2CAyBZd,MAzBY;;AAAA;AAAA;AAAA;AA2BnB1B,UAAAA,OAAO,CAACyC,KAAR,CAAc,uBAAd;AACA1C,UAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBW,IAAhB,CAAqB,4CAArB;;AA5BmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB","sourcesContent":["import mongoose from \"mongoose\";\r\nimport jwt from 'jsonwebtoken'\r\nimport { v2 as cloudinary } from 'cloudinary';\r\nimport fs from 'fs/promises';\r\n\r\ncloudinary.config({\r\n    cloud_name: 'dqr2mxlv3', \r\n    api_key: '847423956334364', \r\n    api_secret: 'ueGE5KG28uAXIpw-JSVnE6P8omM'\r\n  });\r\n\r\nconst connectDb = () =>{\r\n     mongoose.connect(\"mongodb://127.0.0.1:27017/sunidhiDb\").then((res)=>{\r\n        console.log(`Database is connected with host:-${res.connection.host}`)\r\n    }).catch((err)=>{\r\n        console.log(`************** Database is not connected ***************** `,err)\r\n    })\r\n};\r\n\r\nexport const LoggedInUserOnly = (req,res,next)=>{\r\n    const token  = req.cookies[\"test-token\"];    \r\n    if(!token) return res.status(401).json({\r\n        success:false,\r\n        message:\"Unauthorized user,please login !\"\r\n    })\r\n    const decodedData = jwt.verify(token,\"your-secret-key\")\r\n    req.user = decodedData.userId; // to get user info by token\r\n\r\n    next()\r\n}\r\n\r\n\r\nconst uploadSingleFile = async (req, res) => {\r\n  \r\n    try {\r\n      if (!req.file) {\r\n        return res.status(400).send(\"No file uploaded\");\r\n      }\r\n  \r\n      // Upload file to Cloudinary\r\n      const result = await cloudinary.uploader.upload(req.file.path, {\r\n        folder: 'avatars', // Folder name in Cloudinary\r\n      });\r\n  \r\n      // Delete the file from the local folder\r\n      await fs.unlink(req.file.path);\r\n  \r\n      // Save file details to MongoDB\r\n      const fileDetails = new File({\r\n        originalName: req.file.originalname,\r\n        fileName: result.public_id,\r\n        filePath: result.secure_url,\r\n        size: req.file.size,\r\n        mimeType: req.file.mimetype,\r\n      });\r\n  \r\n      await fileDetails.save();\r\n      return result\r\n    } catch (error) {\r\n      console.error(\"Error uploading file:\", error);\r\n      res.status(500).send(\"An error occurred while uploading the file\");\r\n    }\r\n  };\r\n\r\nexport {\r\n    connectDb,\r\n    uploadSingleFile\r\n}"],"file":"db.dev.js"}