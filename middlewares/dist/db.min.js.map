{"version":3,"sources":["db.js"],"names":["_mongoose","_interopRequireDefault","require","_jsonwebtoken","_cloudinary","_promises","cloudinary","config","cloud_name","api_key","api_secret","connectDb","mongoose","connect","then","res","console","log","concat","connection","host","err","LoggedInUserOnly","req","next","cookies","token","status","json","success","jwt","verify","user","decodedData","userId","uploadSingleFile","result","fileDetails","regeneratorRuntime","async","_context","prev","file","abrupt","send","awrap","path","folder","sent","fs","unlink","File","originalname","fileName","public_id","filePath","secure_url","size","mimeType","mimetype","save","t0","error","stop"],"mappings":"+IAAA,IAAAA,UAAAC,uBAAAC,QAAA,aACAC,cAAAF,uBAAAC,QAAA,iBACAE,YAAAF,QAAA,cACAG,UAAAJ,uBAAAC,QAAA,wFAEAI,YAAAA,GAAWC,OAAO,CACdC,WAAY,YANhBC,QAAA,kBAQIC,WAAY,gCANhB,IAAAC,UAAA,WAUKC,UAAAA,QAASC,QAAQ,uCAAuCC,KAAK,SAACC,GATnEC,QAAAC,IAAA,oCAAAC,OAAAH,EAAAI,WAAAC,SASK,MAEQ,SAACC,GACNL,QAAQC,IAAR,8DAA0EI,kCAR9EZ,IAASa,iBAFK,SAAAC,EAAAR,EAAAS,GAGdd,IAAAA,EAAYa,EAAAE,QAAA,cAHhB,IAAAC,EAAA,OAAAX,EAAAY,OAAA,KAAAC,KAAA,CAiBQC,SAAQ,EAXVlB,QAAY,qCAEVK,IAAAA,EAAAc,cAAAA,QAAAC,OAAAL,EAAA,mBADHH,EAAAS,KAEQC,EAAAC,OAFRV,+CAoBL,IAAMW,iBAAmB,SAAOZ,EAAKR,GAAZ,IAAAqB,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAhB,MAAA,KAAA,EAAA,GAAAgB,EAAAC,KAAA,EAXjBf,EAAOgB,KAWU,CAAAF,EAAAhB,KAAA,EAAA,MAAA,OAAAgB,EAAAG,OAAA,SAVT5B,EAD2BY,OAAA,KAAAiB,KAAA,qBAWlB,KAAA,EAAA,OAAAJ,EAAAhB,KAAA,EAAAc,mBAAAO,MAPDf,YAAAA,GAAAA,SAAIC,OAAOL,EAAXgB,KAAiBI,KAAA,CAgBjCC,OAAQ,aATS,KAAA,EAAA,OAPfd,EAOeO,EAAAQ,KAAAR,EAAAhB,KAAA,EAAAc,mBAAAO,MAblBI,UAAAA,QAAAC,OAAA3B,EAAAmB,KAAAI,OAakB,KAAA,EAAA,OAgBbT,EAAc,IAAIc,KAAK,CAhB7BhB,aAAgBZ,EAAGmB,KAAAU,aAAAC,SAAAjB,EAAAkB,UAAAC,SAAAnB,EAAAoB,WAAAC,KAAAlC,EAAAmB,KAAAe,KAAAC,SAAAnC,EAAAmB,KAAAiB,WAAAnB,EAAAhB,KAAA,GAAAc,mBAAAO,MAwBbR,EAAYuB,QAxBC,KAAA,GAAA,OAAApB,EAAAG,OAAA,SAAAP,GAAA,KAAA,GAAAI,EAAAC,KAAA,GAAAD,EAAAqB,GAAArB,EAAA,MAAA,GAAAxB,QAAA8C,MAAA,wBAAAtB,EAAAqB,IAAA9C,EAAAY,OAAA,KAAAiB,KAAA,8CAAA,KAAA,GAAA,IAAA,MAAA,OAAAJ,EAAAuB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA","file":"db.min.js","sourcesContent":["import mongoose from \"mongoose\";\r\nimport jwt from 'jsonwebtoken'\r\nimport { v2 as cloudinary } from 'cloudinary';\r\nimport fs from 'fs/promises';\r\n\r\ncloudinary.config({\r\n    cloud_name: 'dqr2mxlv3', \r\n    api_key: '847423956334364', \r\n    api_secret: 'ueGE5KG28uAXIpw-JSVnE6P8omM'\r\n  });\r\n\r\nconst connectDb = () =>{\r\n     mongoose.connect(\"mongodb://127.0.0.1:27017/sunidhiDb\").then((res)=>{\r\n        console.log(`Database is connected with host:-${res.connection.host}`)\r\n    }).catch((err)=>{\r\n        console.log(`************** Database is not connected ***************** `,err)\r\n    })\r\n};\r\n\r\nexport const LoggedInUserOnly = (req,res,next)=>{\r\n    const token  = req.cookies[\"test-token\"];    \r\n    if(!token) return res.status(401).json({\r\n        success:false,\r\n        message:\"Unauthorized user,please login !\"\r\n    })\r\n    const decodedData = jwt.verify(token,\"your-secret-key\")\r\n    req.user = decodedData.userId; // to get user info by token\r\n\r\n    next()\r\n}\r\n\r\n\r\nconst uploadSingleFile = async (req, res) => {\r\n  \r\n    try {\r\n      if (!req.file) {\r\n        return res.status(400).send(\"No file uploaded\");\r\n      }\r\n  \r\n      // Upload file to Cloudinary\r\n      const result = await cloudinary.uploader.upload(req.file.path, {\r\n        folder: 'avatars', // Folder name in Cloudinary\r\n      });\r\n  \r\n      // Delete the file from the local folder\r\n      await fs.unlink(req.file.path);\r\n  \r\n      // Save file details to MongoDB\r\n      const fileDetails = new File({\r\n        originalName: req.file.originalname,\r\n        fileName: result.public_id,\r\n        filePath: result.secure_url,\r\n        size: req.file.size,\r\n        mimeType: req.file.mimetype,\r\n      });\r\n  \r\n      await fileDetails.save();\r\n      return result\r\n    } catch (error) {\r\n      console.error(\"Error uploading file:\", error);\r\n      res.status(500).send(\"An error occurred while uploading the file\");\r\n    }\r\n  };\r\n\r\nexport {\r\n    connectDb,\r\n    uploadSingleFile\r\n}"]}