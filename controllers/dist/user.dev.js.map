{"version":3,"sources":["user.js"],"names":["cloudinary","config","cloud_name","api_key","api_secret","uploader","upload","public_id","error","console","log","uploadResult","optimizeUrl","url","fetch_format","quality","autoCropUrl","crop","gravity","width","height","register","req","res","body","name","email","phone","password","status","json","success","message","bcryptPassword","User","create","login","findOne","select","user","isPasswordMatch","token","jwt","sign","userId","_id","expiresIn","cookie","maxAge","httpOnly","profile","findById","deleteUser","params","id","findByIdAndDelete","updateEditUser","bodyData","save","logout","clearCookie","uploadSingleFile","file","send","fileDetails","File","originalName","originalname","fileName","filename","filePath","path","size","mimeType","mimetype"],"mappings":"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","sourcesContent":["import { User, File } from \"../models/user.js\";\r\nimport {hash,compare} from  'bcrypt';\r\nimport jwt from 'jsonwebtoken';\r\nimport { v2 as cloudinary } from 'cloudinary';\r\n\r\n(async function() {\r\n\r\n    // Configuration\r\n    cloudinary.config({ \r\n        cloud_name: 'dqr2mxlv3', \r\n        api_key: '847423956334364', \r\n        api_secret: 'ueGE5KG28uAXIpw-JSVnE6P8omM' // Click 'View API Keys' above to copy your API secret\r\n    });\r\n    \r\n    // Upload an image\r\n     const uploadResult = await cloudinary.uploader\r\n       .upload(\r\n           'https://res.cloudinary.com/demo/image/upload/getting-started/shoes.jpg', {\r\n               public_id: 'shoes',\r\n           }\r\n       )\r\n       .catch((error) => {\r\n           console.log(error);\r\n       });\r\n    \r\n    console.log(uploadResult);\r\n    \r\n    // Optimize delivery by resizing and applying auto-format and auto-quality\r\n    const optimizeUrl = cloudinary.url('shoes', {\r\n        fetch_format: 'auto',\r\n        quality: 'auto'\r\n    });\r\n    \r\n    console.log(optimizeUrl);\r\n    \r\n    // Transform the image: auto-crop to square aspect_ratio\r\n    const autoCropUrl = cloudinary.url('shoes', {\r\n        crop: 'auto',\r\n        gravity: 'auto',\r\n        width: 500,\r\n        height: 500,\r\n    });\r\n    \r\n    console.log(autoCropUrl);    \r\n})();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n //----------------------------Registeration Api-------------------//\r\n\r\nconst register = async (req, res) => {\r\n  const { name, email, phone, password } = req.body;\r\n\r\n  if (!email || !phone || !password || !name)\r\n    return res.status(400).json({\r\n      success: false,\r\n      message: \"ALL field are required \",\r\n    });\r\n \r\n   const bcryptPassword = await hash(password,10)\r\n  await User.create({\r\n    name,\r\n    email,\r\n    password:bcryptPassword,\r\n    phone,\r\n  });\r\n  res.status(201).json({\r\n    success: true,\r\n    message: \"User created successfully\",\r\n  });\r\n};\r\n\r\n //----------------------------Login Api-------------------//\r\n\r\nconst login = async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  const user = await User.findOne({ email }).select(\"+password\");\r\n\r\n  if (!user)\r\n    return res.status(400).json({\r\n      success: false,\r\n      message: \"Invalid email or Password\",\r\n    });\r\n    const isPasswordMatch = await compare(password,user.password) // to compare the encrypted password with normai\r\n  if(!isPasswordMatch)  return res.status(400).json({\r\n      success:false,\r\n      message:\"Invalid email or Password\"\r\n  });\r\n  const token = jwt.sign({ userId: user._id }, 'your-secret-key', {\r\n    expiresIn: '1h',\r\n    });\r\n\r\n return res.status(200).cookie(\"test-token\",token,{\r\n    maxAge:1000*60*60*24, // to the token after sometime\r\n    httpOnly:true\r\n\r\n   }).json({\r\n    success: true,\r\n    message: \"User loggedIn Successfully\",\r\n    user,\r\n    token\r\n  });\r\n};\r\n\r\n\r\n //----------------------------GetUserProfile-------------------//\r\n\r\nconst profile = async (req, res) => {\r\n  console.log(req)\r\n  // const userId = req.params.id;\r\n  // const user = await User.findById(userId);\r\n  const user = await User.findById(req.user); // req.user at db token access\r\n  return res.status(200).json({\r\n    success: false,\r\n    message: \"Get Profile Successfully\",\r\n    user,\r\n  });\r\n};\r\n\r\n //----------------------------DeleteUser Api-------------------//\r\n\r\nconst deleteUser = async (req, res) => {\r\n  const userId = req.params.id;\r\n  const user = await User.findByIdAndDelete(userId);\r\n  if (!user) {\r\n    return res.status(404).json({ message: \"User not found\" });\r\n  }\r\n  res.status(200).json({ message: \"User deleted successfully\", user });\r\n};\r\n\r\n\r\n //----------------------------EditUser Api-------------------//\r\n\r\nconst updateEditUser = async (req, res) => {\r\n    const userId = req.params.id;\r\n    const bodyData = req.body\r\n    const user = await User.findById(userId)\r\n    if(bodyData.name)  user.name = bodyData.name;\r\n    if(bodyData.email)  user.email = bodyData.email;\r\n    if(bodyData.phone)  user.phone = bodyData.phone;\r\n     await user.save()\r\n\r\n  res.status(201).json({\r\n    success: true,\r\n    message: \"User Updated successfully\",\r\n    user\r\n  });\r\n};\r\n\r\n//-------------------------------logout------------------------------// \r\n\r\nconst logout  = async(req,res) => {\r\nawait res.clearCookie(\"test-token\"); //  removing token getting from request\r\n// return res.status(200).cookie(\"test-token\",\"\",{maxAge:0}).json({  //----another method for logout--------//\r\nreturn res.status(200).json({\r\n  success: true,\r\n  message: \"User Logout Successfull\",\r\n  \r\n})\r\n}\r\n\r\n//-------------------------------Upload------------------------------// \r\n\r\n\r\n\r\nconst uploadSingleFile = async (req, res) => {\r\n  console.log(req.file, \"==========\");\r\n\r\n  try {\r\n    if (!req.file) {\r\n      return res.status(400).send(\"No file uploaded\");\r\n    }\r\n\r\n    \r\n    const fileDetails = new File({\r\n      originalName: req.file.originalname,\r\n      fileName: req.file.filename,\r\n      filePath: req.file.path,\r\n      size: req.file.size,\r\n      mimeType: req.file.mimetype,\r\n    });\r\n\r\n    await fileDetails.save();\r\n    res.status(201).send({ message: \"File uploaded successfully\", file: fileDetails });\r\n  } catch (error) {\r\n    console.error(\"Error uploading file:\", error);\r\n    res.status(500).send(\"An error occurred while uploading the file\");\r\n  }\r\n};\r\n\r\n\r\n//-------------------------------GetUploaded file------------------------------//\r\n\r\nexport { register, login, profile, deleteUser, updateEditUser,logout, uploadSingleFile};\r\n\r\n\r\n\r\n\r\n\r\n"],"file":"user.dev.js"}