{"version":3,"sources":["user.js"],"names":["register","req","res","body","name","email","phone","password","status","json","success","message","bcryptPassword","User","create","login","findOne","select","user","isPasswordMatch","token","jwt","sign","userId","_id","expiresIn","cookie","maxAge","httpOnly","profile","findById","deleteUser","params","id","findByIdAndDelete","updateEditUser","bodyData","save"],"mappings":"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","sourcesContent":["import { User } from \"../models/user.js\";\r\nimport {hash,compare} from  'bcrypt';\r\nimport jwt from 'jsonwebtoken';\r\n\r\n\r\n\r\nconst register = async (req, res) => {\r\n  const { name, email, phone, password } = req.body;\r\n\r\n  if (!email || !phone || !password || !name)\r\n    return res.status(400).json({\r\n      success: false,\r\n      message: \"ALL field are required \",\r\n    });\r\n \r\n const bcryptPassword = await hash(password,10)\r\n  await User.create({\r\n    name,\r\n    email,\r\n    password:bcryptPassword,\r\n    phone,\r\n  });\r\n  res.status(201).json({\r\n    success: true,\r\n    message: \"User created successfully\",\r\n  });\r\n};\r\n\r\nconst login = async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  const user = await User.findOne({ email }).select(\"+password\");\r\n\r\n  if (!user)\r\n    return res.status(400).json({\r\n      success: false,\r\n      message: \"Invalid email or Password\",\r\n    });\r\n    const isPasswordMatch = await compare(password,user.password)\r\n  if(!isPasswordMatch)  return res.status(400).json({\r\n      success:false,\r\n      message:\"Invalid email or Password\"\r\n  });\r\n  const token = jwt.sign({ userId: user._id }, 'your-secret-key', {\r\n    expiresIn: '1h',\r\n    });\r\n\r\n\r\n\r\n   \r\n   return res.status(200).cookie(\"test-token\",token,{\r\n    maxAge:1000*60*60*24,\r\n    httpOnly:true\r\n\r\n   }).json({\r\n    success: true,\r\n    message: \"User loggedIn Successfully\",\r\n    user,\r\n    token\r\n  });\r\n};\r\n\r\nconst profile = async (req, res) => {\r\n  // const userId = req.params.id;\r\n  // const user = await User.findById(userId);\r\n  const user = await User.findById(req.user); // req.user at db token access\r\n  return res.status(200).json({\r\n    success: false,\r\n    message: \"Get Profile Successfully\",\r\n    user,\r\n  });\r\n};\r\n\r\nconst deleteUser = async (req, res) => {\r\n  const userId = req.params.id;\r\n  const user = await User.findByIdAndDelete(userId);\r\n  if (!user) {\r\n    return res.status(404).json({ message: \"User not found\" });\r\n  }\r\n  res.status(200).json({ message: \"User deleted successfully\", user });\r\n};\r\n\r\n\r\n\r\n\r\nconst updateEditUser = async (req, res) => {\r\n    const userId = req.params.id;\r\n    const bodyData = req.body\r\n    const user = await User.findById(userId)\r\n    if(bodyData.name)  user.name = bodyData.name;\r\n    if(bodyData.email)  user.email = bodyData.email;\r\n    if(bodyData.phone)  user.phone = bodyData.phone;\r\n     await user.save()\r\n\r\n  res.status(201).json({\r\n    success: true,\r\n    message: \"User Updated successfully\",\r\n    user\r\n  });\r\n};\r\n\r\nexport { register, login, profile, deleteUser, updateEditUser };\r\n"],"file":"user.dev.js"}