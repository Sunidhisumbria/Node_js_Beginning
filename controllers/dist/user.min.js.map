{"version":3,"sources":["user.js"],"names":["_user","require","_bcrypt","_jsonwebtoken","_interopRequireDefault","_cloudinary","uploadResult","optimizeUrl","autoCropUrl","regeneratorRuntime","async","_context","prev","next","cloudinary","config","cloud_name","api_key","api_secret","awrap","uploader","upload","public_id","error","console","log","sent","url","fetch_format","quality","crop","gravity","width","stop","register","req","res","_req$body","name","email","phone","password","bcryptPassword","_context2","body","abrupt","status","json","success","message","hash","User","create","login","_req$body2","user","token","_context3","findOne","select","compare","jwt","userId","_id","cookie","maxAge","httpOnly","profile","_context4","findById","params","id","findByIdAndDelete","bodyData","_context6","save","isPasswordMatch","clearCookie","fileDetails","_context8","file","send","File","originalName","originalname","fileName","filename","filePath","path","size","mimeType","mimetype","t0"],"mappings":"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","file":"user.min.js","sourcesContent":["import { User, File } from \"../models/user.js\";\r\nimport {hash,compare} from  'bcrypt';\r\nimport jwt from 'jsonwebtoken';\r\nimport { v2 as cloudinary } from 'cloudinary';\r\n\r\n(async function() {\r\n\r\n    // Configuration\r\n    cloudinary.config({ \r\n        cloud_name: 'dqr2mxlv3', \r\n        api_key: '847423956334364', \r\n        api_secret: 'ueGE5KG28uAXIpw-JSVnE6P8omM' // Click 'View API Keys' above to copy your API secret\r\n    });\r\n    \r\n    // Upload an image\r\n     const uploadResult = await cloudinary.uploader\r\n       .upload(\r\n           'https://res.cloudinary.com/demo/image/upload/getting-started/shoes.jpg', {\r\n               public_id: 'shoes',\r\n           }\r\n       )\r\n       .catch((error) => {\r\n           console.log(error);\r\n       });\r\n    \r\n    console.log(uploadResult);\r\n    \r\n    // Optimize delivery by resizing and applying auto-format and auto-quality\r\n    const optimizeUrl = cloudinary.url('shoes', {\r\n        fetch_format: 'auto',\r\n        quality: 'auto'\r\n    });\r\n    \r\n    console.log(optimizeUrl);\r\n    \r\n    // Transform the image: auto-crop to square aspect_ratio\r\n    const autoCropUrl = cloudinary.url('shoes', {\r\n        crop: 'auto',\r\n        gravity: 'auto',\r\n        width: 500,\r\n        height: 500,\r\n    });\r\n    \r\n    console.log(autoCropUrl);    \r\n})();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n //----------------------------Registeration Api-------------------//\r\n\r\nconst register = async (req, res) => {\r\n  const { name, email, phone, password } = req.body;\r\n\r\n  if (!email || !phone || !password || !name)\r\n    return res.status(400).json({\r\n      success: false,\r\n      message: \"ALL field are required \",\r\n    });\r\n \r\n   const bcryptPassword = await hash(password,10)\r\n  await User.create({\r\n    name,\r\n    email,\r\n    password:bcryptPassword,\r\n    phone,\r\n  });\r\n  res.status(201).json({\r\n    success: true,\r\n    message: \"User created successfully\",\r\n  });\r\n};\r\n\r\n //----------------------------Login Api-------------------//\r\n\r\nconst login = async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  const user = await User.findOne({ email }).select(\"+password\");\r\n\r\n  if (!user)\r\n    return res.status(400).json({\r\n      success: false,\r\n      message: \"Invalid email or Password\",\r\n    });\r\n    const isPasswordMatch = await compare(password,user.password) // to compare the encrypted password with normai\r\n  if(!isPasswordMatch)  return res.status(400).json({\r\n      success:false,\r\n      message:\"Invalid email or Password\"\r\n  });\r\n  const token = jwt.sign({ userId: user._id }, 'your-secret-key', {\r\n    expiresIn: '1h',\r\n    });\r\n\r\n return res.status(200).cookie(\"test-token\",token,{\r\n    maxAge:1000*60*60*24, // to the token after sometime\r\n    httpOnly:true\r\n\r\n   }).json({\r\n    success: true,\r\n    message: \"User loggedIn Successfully\",\r\n    user,\r\n    token\r\n  });\r\n};\r\n\r\n\r\n //----------------------------GetUserProfile-------------------//\r\n\r\nconst profile = async (req, res) => {\r\n  console.log(req)\r\n  // const userId = req.params.id;\r\n  // const user = await User.findById(userId);\r\n  const user = await User.findById(req.user); // req.user at db token access\r\n  return res.status(200).json({\r\n    success: false,\r\n    message: \"Get Profile Successfully\",\r\n    user,\r\n  });\r\n};\r\n\r\n //----------------------------DeleteUser Api-------------------//\r\n\r\nconst deleteUser = async (req, res) => {\r\n  const userId = req.params.id;\r\n  const user = await User.findByIdAndDelete(userId);\r\n  if (!user) {\r\n    return res.status(404).json({ message: \"User not found\" });\r\n  }\r\n  res.status(200).json({ message: \"User deleted successfully\", user });\r\n};\r\n\r\n\r\n //----------------------------EditUser Api-------------------//\r\n\r\nconst updateEditUser = async (req, res) => {\r\n    const userId = req.params.id;\r\n    const bodyData = req.body\r\n    const user = await User.findById(userId)\r\n    if(bodyData.name)  user.name = bodyData.name;\r\n    if(bodyData.email)  user.email = bodyData.email;\r\n    if(bodyData.phone)  user.phone = bodyData.phone;\r\n     await user.save()\r\n\r\n  res.status(201).json({\r\n    success: true,\r\n    message: \"User Updated successfully\",\r\n    user\r\n  });\r\n};\r\n\r\n//-------------------------------logout------------------------------// \r\n\r\nconst logout  = async(req,res) => {\r\nawait res.clearCookie(\"test-token\"); //  removing token getting from request\r\n// return res.status(200).cookie(\"test-token\",\"\",{maxAge:0}).json({  //----another method for logout--------//\r\nreturn res.status(200).json({\r\n  success: true,\r\n  message: \"User Logout Successfull\",\r\n  \r\n})\r\n}\r\n\r\n//-------------------------------Upload------------------------------// \r\n\r\n\r\n\r\nconst uploadSingleFile = async (req, res) => {\r\n  console.log(req.file, \"==========\");\r\n\r\n  try {\r\n    if (!req.file) {\r\n      return res.status(400).send(\"No file uploaded\");\r\n    }\r\n\r\n    \r\n    const fileDetails = new File({\r\n      originalName: req.file.originalname,\r\n      fileName: req.file.filename,\r\n      filePath: req.file.path,\r\n      size: req.file.size,\r\n      mimeType: req.file.mimetype,\r\n    });\r\n\r\n    await fileDetails.save();\r\n    res.status(201).send({ message: \"File uploaded successfully\", file: fileDetails });\r\n  } catch (error) {\r\n    console.error(\"Error uploading file:\", error);\r\n    res.status(500).send(\"An error occurred while uploading the file\");\r\n  }\r\n};\r\n\r\n\r\n//-------------------------------GetUploaded file------------------------------//\r\n\r\nexport { register, login, profile, deleteUser, updateEditUser,logout, uploadSingleFile};\r\n\r\n\r\n\r\n\r\n\r\n"]}