{"version":3,"sources":["user.js"],"names":["_user","require","_bcrypt","_jsonwebtoken","_interopRequireDefault","register","req","res","_req$body","name","email","phone","password","bcryptPassword","regeneratorRuntime","async","_context","prev","next","body","abrupt","status","json","success","message","awrap","sent","User","create","stop","login","_req$body2","user","token","_context2","findOne","select","compare","userId","_id","cookie","httpOnly","profile","_context3","findById","deleteUser","_context4","findByIdAndDelete","updateEditUser","bodyData","_context5","params","id","save","isPasswordMatch"],"mappings":"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","file":"user.min.js","sourcesContent":["import { User } from \"../models/user.js\";\r\nimport {hash,compare} from  'bcrypt';\r\nimport jwt from 'jsonwebtoken';\r\n\r\n\r\n\r\nconst register = async (req, res) => {\r\n  const { name, email, phone, password } = req.body;\r\n\r\n  if (!email || !phone || !password || !name)\r\n    return res.status(400).json({\r\n      success: false,\r\n      message: \"ALL field are required \",\r\n    });\r\n \r\n const bcryptPassword = await hash(password,10)\r\n  await User.create({\r\n    name,\r\n    email,\r\n    password:bcryptPassword,\r\n    phone,\r\n  });\r\n  res.status(201).json({\r\n    success: true,\r\n    message: \"User created successfully\",\r\n  });\r\n};\r\n\r\nconst login = async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  const user = await User.findOne({ email }).select(\"+password\");\r\n\r\n  if (!user)\r\n    return res.status(400).json({\r\n      success: false,\r\n      message: \"Invalid email or Password\",\r\n    });\r\n    const isPasswordMatch = await compare(password,user.password)\r\n  if(!isPasswordMatch)  return res.status(400).json({\r\n      success:false,\r\n      message:\"Invalid email or Password\"\r\n  });\r\n  const token = jwt.sign({ userId: user._id }, 'your-secret-key', {\r\n    expiresIn: '1h',\r\n    });\r\n\r\n\r\n\r\n   \r\n   return res.status(200).cookie(\"test-token\",token,{\r\n    maxAge:1000*60*60*24,\r\n    httpOnly:true\r\n\r\n   }).json({\r\n    success: true,\r\n    message: \"User loggedIn Successfully\",\r\n    user,\r\n    token\r\n  });\r\n};\r\n\r\nconst profile = async (req, res) => {\r\n  // const userId = req.params.id;\r\n  // const user = await User.findById(userId);\r\n  const user = await User.findById(req.user); // req.user at db token access\r\n  return res.status(200).json({\r\n    success: false,\r\n    message: \"Get Profile Successfully\",\r\n    user,\r\n  });\r\n};\r\n\r\nconst deleteUser = async (req, res) => {\r\n  const userId = req.params.id;\r\n  const user = await User.findByIdAndDelete(userId);\r\n  if (!user) {\r\n    return res.status(404).json({ message: \"User not found\" });\r\n  }\r\n  res.status(200).json({ message: \"User deleted successfully\", user });\r\n};\r\n\r\n\r\n\r\n\r\nconst updateEditUser = async (req, res) => {\r\n    const userId = req.params.id;\r\n    const bodyData = req.body\r\n    const user = await User.findById(userId)\r\n    if(bodyData.name)  user.name = bodyData.name;\r\n    if(bodyData.email)  user.email = bodyData.email;\r\n    if(bodyData.phone)  user.phone = bodyData.phone;\r\n     await user.save()\r\n\r\n  res.status(201).json({\r\n    success: true,\r\n    message: \"User Updated successfully\",\r\n    user\r\n  });\r\n};\r\n\r\nexport { register, login, profile, deleteUser, updateEditUser };\r\n"]}